<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1586600_test_sno.RepopulateCertificateTables</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>RepopulateCertificateTables</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var RepopulateCertificateTables = Class.create();
RepopulateCertificateTables.prototype = {
    initialize: function() {},

    repopulateFunction: function () {
        try {
            // 1. Retrieve API Key
            var apiKey = gs.getProperty('x_1586600_test_sno.dc1_api_key');
            if (!apiKey) {
                gs.error("Missing DigiCert API key system property. Aborting certificate repopulation.");
                return;
            }

            // 2. Get all unique certificate_ids from Endpoint Table
            var grEndpoint = new GlideRecord('x_1586600_test_sno_endpoint_table');
            grEndpoint.addNotNullQuery('certificate_id');
            grEndpoint.query();

            var processedCertIds = {};

            while (grEndpoint.next()) {
                var certificateId = grEndpoint.certificate_id + '';
                if (!certificateId || processedCertIds[certificateId])
                    continue;
                processedCertIds[certificateId] = true;

                // 3. Fetch Certificate Details from DigiCert API
                var rDetails = new sn_ws.RESTMessageV2('DigiCert_ONE_TLM_API', 'Certificate Details by ID');
                rDetails.setStringParameterNoEscape('certificate_id', certificateId);
                rDetails.setRequestHeader("x-api-key", apiKey);
                rDetails.setRequestHeader("Content-Type", "application/json");

                var responseDetails = rDetails.execute();
                var responseBodyDetails = responseDetails.getBody();

                try {
                    var detailsJSON = JSON.parse(responseBodyDetails);

                    // === Owners string ===
                    var owners = [];
                    if (detailsJSON.certificate_owners_details && Array.isArray(detailsJSON.certificate_owners_details)) {
                        detailsJSON.certificate_owners_details.forEach(function(owner) {
                            owners.push(owner.first_name + ' ' + owner.last_name + ' (' + owner.email + ')');
                        });
                    }
                    var ownersString = owners.join('; ');

                    // === SANS extraction ===
                    var sans = [];
                    if (detailsJSON.attributes && typeof detailsJSON.attributes === 'string') {
                        try {
                            var attrs = JSON.parse(detailsJSON.attributes);
                            if (attrs.san && attrs.san.dns_name)
                                sans = attrs.san.dns_name;
                        } catch (e) {
                            gs.warn("Could not parse attributes JSON: " + e.message);
                        }
                    } else if (detailsJSON.attributes && detailsJSON.attributes.san && detailsJSON.attributes.san.dns_name) {
                        sans = detailsJSON.attributes.san.dns_name;
                    }
                    var sansString = sans.join(', ');

                    // === Tags string ===
                    var tagsString = detailsJSON.tags ? detailsJSON.tags.join(', ') : '';

                    // === Upsert record in Certificate_Details table ===
                    var gr = new GlideRecord('x_1586600_test_sno_certificate_details');
                    gr.addQuery('certificate_id', detailsJSON.id);
                    gr.query();

                    var isExistingRecord = gr.next();
                    if (!isExistingRecord) {
                        gr.initialize();
                        gs.info("Inserting certificate details for " + detailsJSON.common_name);
                    } else {
                        gs.info("Updating certificate details for " + detailsJSON.common_name);
                    }

                    gr.department = detailsJSON.business_unit ? detailsJSON.business_unit.name : '';
                    gr.current_certificate = true;
                    gr.validity_to = detailsJSON.valid_to;
                    gr.tags = tagsString;
                    gr.order_id = detailsJSON.enrollment ? detailsJSON.enrollment.id : '';
                    gr.sans = sansString;
                    gr.serial_number = detailsJSON.serial_number;
                    gr.status = detailsJSON.status;
                    gr.common_name = detailsJSON.common_name;
                    gr.certificate_id = detailsJSON.id;
                    gr.validity_from = detailsJSON.valid_from;
                    gr.certificate_owners = ownersString;

                    var result = isExistingRecord ? gr.update() : gr.insert();
                    if (result) {
                        gs.info("Successfully saved certificate details for " + detailsJSON.common_name);
                    } else {
                        gs.error("Failed to save certificate details for " + detailsJSON.common_name);
                    }

                } catch (e) {
                    gs.error("Failed to process certificate ID " + certificateId + ": " + e.message);
                }
            }

            gs.info("Done processing all unique certificate IDs from endpoint table.");

        } catch (ex) {
            gs.error("Error in repopulateFunction: " + ex.message);
        }
    },

    type: 'RepopulateCertificateTables'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-07-14 22:44:04</sys_created_on>
        <sys_id>a80f88b893b6e650c7667a5efaba102c</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>RepopulateCertificateTables</sys_name>
        <sys_package display_value="Test Snow Automation " source="x_1586600_test_sno">e53c840993d66250c7667a5efaba1019</sys_package>
        <sys_policy/>
        <sys_scope display_value="Test Snow Automation ">e53c840993d66250c7667a5efaba1019</sys_scope>
        <sys_update_name>sys_script_include_a80f88b893b6e650c7667a5efaba102c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-07-18 19:36:54</sys_updated_on>
    </sys_script_include>
</record_update>
